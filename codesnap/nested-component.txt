Project Directory: nested-component
Total Files Analyzed: 27
Total Size: 0.03 MB
Date: 2025-01-15T16:21:36.870Z

Token counts and costs by model:
   GPT-3.5: 7.2K tokens → $0.0108
   GPT-4:   7.2K tokens → $0.2166
   Claude:  7.2K tokens → $0.1083
   LLaMA 2: 7.9K tokens → $0.0159

Directory structure:
├── src/
│   ├── app/
│   │   ├── app.component.html
│   │   ├── app.component.scss
│   │   ├── app.component.spec.ts
│   │   ├── app.component.ts
│   │   ├── app.config.server.ts
│   │   ├── app.config.ts
│   │   ├── app.routes.server.ts
│   │   └── app.routes.ts
│   ├── components/
│   │   ├── nested.component.ts
│   │   ├── search-bar.component.ts
│   │   └── select-example.component.ts
│   ├── directive/
│   │   └── dynamic-loader.directive.ts
│   ├── interface/
│   │   └── dynamic-component.interface.ts
│   ├── services/
│   │   └── dynamic-renderer.service.ts
│   ├── index.html
│   ├── main.server.ts
│   ├── main.ts
│   ├── server.ts
│   └── styles.scss
├── .editorconfig
├── .gitignore
├── angular.json
├── package.json
├── README.md
├── tsconfig.app.json
├── tsconfig.json
└── tsconfig.spec.json

================================================
File: README.md
================================================
# NestedComponent

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.0.7.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.


================================================
File: .editorconfig
================================================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false


================================================
File: .gitignore
================================================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db


================================================
File: angular.json
================================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "nested-component": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/nested-component",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": [],
            "server": "src/main.server.ts",
            "outputMode": "server",
            "ssr": {
              "entry": "src/server.ts"
            }
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "nested-component:build:production"
            },
            "development": {
              "buildTarget": "nested-component:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}


================================================
File: package.json
================================================
{
  "name": "nested-component",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "serve:ssr:nested-component": "node dist/nested-component/server/server.mjs"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/platform-server": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@angular/ssr": "^19.0.7",
    "express": "^4.18.2",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.7",
    "@angular/cli": "^19.0.7",
    "@angular/compiler-cli": "^19.0.0",
    "@types/express": "^4.17.17",
    "@types/jasmine": "~5.1.0",
    "@types/node": "^18.18.0",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.6.2"
  }
}

================================================
File: src/app/app.component.html
================================================
<component-nested></component-nested>
<router-outlet></router-outlet>

================================================
File: src/app/app.component.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'nested-component' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('nested-component');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, nested-component');
  });
});


================================================
File: src/app/app.component.ts
================================================
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { NestedComponent } from '../components/nested.component';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, NestedComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'nested-component';
}


================================================
File: src/app/app.config.server.ts
================================================
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRoutesConfig } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRoutesConfig(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);


================================================
File: src/app/app.config.ts
================================================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay())]
};


================================================
File: src/app/app.routes.server.ts
================================================
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];


================================================
File: src/app/app.routes.ts
================================================
import { Routes } from '@angular/router';

export const routes: Routes = [];


================================================
File: src/components/nested.component.ts
================================================
// components/nested.component.ts
import {
  Component,
  signal,
  ViewChild,
  OnInit,
  ChangeDetectorRef,
  AfterViewInit,
  ViewContainerRef,
  WritableSignal,
} from '@angular/core';
import {
  FormGroup,
  FormBuilder,
  FormControl,
  ReactiveFormsModule,
} from '@angular/forms';
import { DynamicLoaderDirective } from '../directive/dynamic-loader.directive';
import {
  DynamicComponent,
  NestedContent,
  SearchContent,
  Some_Model,
} from '../interface/dynamic-component.interface';
import { SearchBarComponent } from './search-bar.component';
import { DynamicRendererService } from '../services/dynamic-renderer.service';
import { SelectComponent } from './select-example.component';

@Component({
  selector: 'component-nested',
  standalone: true,
  imports: [ReactiveFormsModule, DynamicLoaderDirective, SearchBarComponent ],
  template: `
    <ng-container #tempContainer></ng-container>
    <form [formGroup]="formGroup">
      <ng-template dynamicLoader></ng-template>
      <search-bar [searchResults]="searchResults"></search-bar>
    </form>
  `,
})
export class NestedComponent implements OnInit, AfterViewInit {
  @ViewChild(DynamicLoaderDirective, { static: false })
  dynamicLoader!: DynamicLoaderDirective;

  @ViewChild('tempContainer', { read: ViewContainerRef, static: true })
  tempContainer!: ViewContainerRef;

  formGroup: FormGroup;
  some_Model1$M: WritableSignal<Some_Model> = signal({
    id: 1,
    name: 'Example Model',
    status: 'active',
    data: {
      value: 'test value',
      timestamp: new Date(),
    },
  });
  searchResults: SearchContent[] = [];

  private etapeContents: NestedContent[] = [
    {
      component: SelectComponent,
      input: [
        {
          options: [
            { label: 'Option 1', value: 1 },
            { label: 'Option 2', value: 2 },
          ],
        },
      ],
    },
  ];

  private selectControl: FormControl = new FormControl('');

  constructor(
    private fb: FormBuilder,
    private dynamicRenderer: DynamicRendererService,
    private changeDetectorRef: ChangeDetectorRef
  ) {
    this.formGroup = this.fb.group({
      select: this.selectControl,
    });
  }

  ngOnInit() {
    this.formGroup = this.fb.group({
      select: this.selectControl
    });
    this.loadComponent(0);
  }

  ngAfterViewInit() {
    Promise.resolve().then(() => {
      if (this.tempContainer) {
        this.dynamicRenderer.setTempContainer(this.tempContainer);
        this.prepareSearchResults().then(() => {
          this.changeDetectorRef.detectChanges();
        });
      }
    });
  }

    private async prepareSearchResults() {
    try {
      this.searchResults = [
        {
          label: 'First Search Item',
          linkUrl: '/first-item',
          icon: 'fas fa-search',
          description: 'This is a detailed description of the first search item',
          value: 'item-1',
          checkboxLabel: 'Select First Item',
          checkboxName: 'check1',
          isChecked: false,
          cardAdditionalData: {
            cardHeader: {
              title: 'First Card Title',
              description: 'Detailed description of the first card',
            },
            cardColumns: [
              {
                title: 'Dynamic Select',
                description: ''
              },
              {
                title: 'Additional Info',
                description: 'Extra information about this item'
              }
            ]
          }
        },
        {
          label: 'Second Search Item',
          linkUrl: '/second-item',
          icon: 'fas fa-star',
          description: 'This is a description of the second search item',
          value: 'item-2',
          checkboxLabel: 'Select Second Item',
          checkboxName: 'check2',
          isChecked: true,
          cardAdditionalData: {
            cardHeader: {
              title: 'Second Card Title',
              description: 'Detailed description of the second card',
            },
            cardColumns: [
              {
                title: 'Dynamic Select',
                description: ''
              },
              {
                title: 'Other Details',
                description: 'Additional details for the second item'
              }
            ]
          }
        }
      ];
      
      this.changeDetectorRef.detectChanges();
    } catch (error) {
      console.error('Error preparing search results:', error);
    }
  }


  private loadComponent(index: number) {
    if (!this.dynamicLoader) {
      console.error('Dynamic loader not initialized');
      return;
    }

    const content = this.etapeContents[index];
    if (!content?.component) {
      console.error('No component found for index:', index);
      return;
    }

    try {
      const viewContainerRef = this.dynamicLoader.viewContainerRef;
      viewContainerRef.clear();

      const componentRef = viewContainerRef.createComponent<DynamicComponent>(
        content.component
      );
      const instance = componentRef.instance;
      if (instance instanceof SelectComponent) {
          instance.control = this.selectControl;
          instance.options = content.input?.[0]['options'] || [];
      }
      // Set core properties
      instance.formGroup = this.formGroup;
      instance.some_Model1$M = this.some_Model1$M;

      // Handle input options
      if (content.input?.[0]['options']) {
        instance['options'] = content.input[0]['options'];
      }

      // Set control
      if (instance['control'] === undefined) {
        instance['control'] = this.selectControl;
      }

      if (instance.changeDetectorRef) {
        instance.changeDetectorRef.detectChanges();
      } else {
        this.changeDetectorRef.detectChanges();
      }

      this.changeDetectorRef.markForCheck();
    } catch (error) {
      console.error('Error loading component:', error);
    }
  }
}

================================================
File: src/components/search-bar.component.ts
================================================
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SearchContent } from '../interface/dynamic-component.interface';
import { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { SelectComponent } from './select-example.component';

@Component({
  selector: 'search-bar',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule, SelectComponent],
  template: `
    <div class="search-container">
      @for(result of searchResults; track result.value) {
        <div class="search-result">
          <!-- Main Result Content -->
          <div class="result-header">
            <i class="icon" [class]="result.icon"></i>
            <div class="header-content">
              <a [href]="result.linkUrl" class="result-link">{{ result.label }}</a>
              <p class="result-description">{{ result.description }}</p>
            </div>
          </div>

          <!-- Checkbox Section -->
          <div class="checkbox-container">
            <label class="custom-checkbox">
              <input
                type="checkbox"
                class="checkbox"
                [name]="result.checkboxName"
                [(ngModel)]="result.isChecked"
              >
              <span class="checkmark"></span>
            </label>
            <span class="checkbox-label">{{ result.checkboxLabel }}</span>
          </div>

          <!-- Card Data -->
          @if(result.cardAdditionalData) {
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">{{ result.cardAdditionalData.cardHeader.title }}</h3>
                <p class="card-subtitle">{{ result.cardAdditionalData.cardHeader.description }}</p>
              </div>

              <div class="card-columns">
                @for(column of result.cardAdditionalData.cardColumns; track column.title) {
                  <div class="column">
                    <h4 class="column-title">{{ column.title }}</h4>
                    @if(column.title === 'Dynamic Select') {
                      <app-select 
                        [options]="selectOptions"
                        [control]="selectControl">
                      </app-select>
                    } @else {
                      <div class="column-content">{{ column.description }}</div>
                    }
                  </div>
                }
              </div>
            </div>
          }
        </div>
      }
    </div>
  `,
  styles: [`
    .search-container {
      padding: 1.5rem;
      max-width: 1000px;
      margin: 0 auto;
      background: #ffffff;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    .search-result {
      border: 1px solid #e8eaed;
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1.25rem;
      background: #ffffff;
      transition: box-shadow 0.2s ease;
    }

    .result-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1.25rem;
    }

    .header-content {
      flex: 1;
    }

    .icon {
      font-size: 1.25rem;
      color: #1a73e8;
      flex-shrink: 0;
      margin-top: 0.25rem;
    }

    .result-link {
      display: inline-block;
      color: #1a73e8;
      text-decoration: none;
      font-weight: 500;
      font-size: 1rem;
      margin-bottom: 0.25rem;
      border-bottom: 2px solid transparent;
      transition: border-color 0.2s ease;
    }

    .result-link:hover {
      border-bottom-color: #1a73e8;
    }

    .result-description {
      margin: 0;
      color: #5f6368;
      font-size: 0.9375rem;
      line-height: 1.5;
    }

    .checkbox-container {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin: 1rem 0;
      padding: 0.5rem 0;
    }

    .custom-checkbox {
      position: relative;
      display: inline-block;
      width: 18px;
      height: 18px;
    }

    .checkbox {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      width: 100%;
      height: 100%;
      margin: 0;
      z-index: 1;
    }

    .checkmark {
      position: absolute;
      top: 0;
      left: 0;
      width: 18px;
      height: 18px;
      background-color: #ffffff;
      border: 2px solid #5f6368;
      border-radius: 3px;
      transition: all 0.2s ease;
    }

    .checkbox:checked + .checkmark {
      background-color: #1a73e8;
      border-color: #1a73e8;
    }

    .checkbox:checked + .checkmark:after {
      content: '';
      position: absolute;
      left: 5px;
      top: 2px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }

    .checkbox-label {
      color: #202124;
      font-size: 0.9375rem;
      user-select: none;
    }

    .card {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 1.5rem;
      margin-top: 1.25rem;
    }

    .card-header {
      margin-bottom: 1.5rem;
    }

    .card-title {
      margin: 0;
      color: #202124;
      font-size: 1.125rem;
      font-weight: 500;
      letter-spacing: -0.01em;
    }

    .card-subtitle {
      margin: 0.5rem 0 0;
      color: #5f6368;
      font-size: 0.9375rem;
      line-height: 1.5;
    }

    .card-columns {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.25rem;
    }

    .column {
      background: #ffffff;
      border-radius: 6px;
      padding: 1.25rem;
      border: 1px solid #e8eaed;
    }

    .column-title {
      margin: 0 0 0.75rem;
      color: #202124;
      font-size: 1rem;
      font-weight: 500;
      letter-spacing: -0.01em;
    }

    .column-content {
      color: #5f6368;
      font-size: 0.9375rem;
      line-height: 1.5;
    }
  `]
})
export class SearchBarComponent {
  @Input() searchResults: SearchContent[] = [];
  selectControl = new FormControl();
  selectOptions = [
    { label: 'Option 1', value: 1 },
    { label: 'Option 2', value: 2 }
  ];

  constructor() {}

  ngAfterViewInit() {
    // Initialize any necessary setup after view initialization
  }
}

================================================
File: src/components/select-example.component.ts
================================================
import { Component, Input, ChangeDetectorRef, OnInit, WritableSignal } from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { DynamicComponent, Some_Model } from '../interface/dynamic-component.interface';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-select',
  standalone: true,
  imports: [ReactiveFormsModule, CommonModule],
  template: `
    <div class="select-wrapper">
      <select [formControl]="control!" class="select-control">
        @for(option of options; track option.value) {
          <option [value]="option.value">{{option.label}}</option>
        }
      </select>
    </div>
  `,
  styles: [`
    .select-wrapper {
      width: 100%;
      position: relative;
    }

    .select-control {
      width: 100%;
      padding: 8px 12px;
      font-size: 14px;
      line-height: 1.5;
      color: #333;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 4px;
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 8px center;
      background-size: 16px;
      cursor: pointer;
    }

    .select-control:focus {
      outline: none;
      border-color: #1a73e8;
      box-shadow: 0 0 0 2px rgba(26,115,232,0.2);
    }

    .select-control:hover {
      border-color: #bbb;
    }
  `]
})
export class SelectComponent implements DynamicComponent, OnInit {
  @Input() options: Array<{ label: string; value: any }> = [];
  @Input() control: FormControl = new FormControl();
  @Input() formGroup?: FormGroup; // Add these from DynamicComponent interface
  @Input() some_Model1$M?: WritableSignal<Some_Model>;

  constructor(public changeDetectorRef: ChangeDetectorRef) {}

  ngOnInit() {
    if (!this.control) {
      this.control = new FormControl();
    }
  }
}

================================================
File: src/directive/dynamic-loader.directive.ts
================================================
import { Directive, ViewContainerRef } from '@angular/core';

@Directive({
  selector: '[dynamicLoader]',
  standalone: true
})
export class DynamicLoaderDirective {
  constructor(public viewContainerRef: ViewContainerRef) {}
}


================================================
File: src/index.html
================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>NestedComponent</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>


================================================
File: src/interface/dynamic-component.interface.ts
================================================
import { Type, ChangeDetectorRef, WritableSignal } from '@angular/core';
import { FormGroup } from '@angular/forms';

export interface Some_Model {
  id: number;
  name: string;
  status: 'active' | 'inactive';
  data?: {
    value: string;
    timestamp: Date;
  };
}

export interface DynamicComponent {
  formGroup?: FormGroup;
  some_Model1$M?: WritableSignal<Some_Model>;
  changeDetectorRef?: ChangeDetectorRef;
  [key: string]: any;
}

export interface NestedContent {
  title?: string;
  description?: string;
  component: Type<DynamicComponent>;
  input: Array<{ [key: string]: any }>;
}

export interface SearchContent {
  label: string;
  linkUrl: string;
  icon: string;
  description: string;
  value: string;
  checkboxLabel: string;
  checkboxName: string;
  isChecked: boolean;
  cardAdditionalData: {
    cardHeader: {
      title: string;
      description: string;
    };
    cardColumns: Array<{
      title: string;
      description: string;
    }>;
  };
}


================================================
File: src/main.server.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;


================================================
File: src/main.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));


================================================
File: src/server.ts
================================================
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * The request handler used by the Angular CLI (dev-server and during build).
 */
export const reqHandler = createNodeRequestHandler(app);


================================================
File: src/services/dynamic-renderer.service.ts
================================================
import {
  Injectable,
  ViewContainerRef,
  Type,
  ComponentRef,
} from '@angular/core';
import { DynamicComponent } from '../interface/dynamic-component.interface';

@Injectable({
  providedIn: 'root',
})
export class DynamicRendererService {
  private tempContainer: ViewContainerRef | null = null;

  setTempContainer(container: ViewContainerRef) {
    this.tempContainer = container;
  }

  renderComponentToHTML<T extends DynamicComponent>(
    component: Type<T>,
    inputs: Partial<T> = {}
  ): string {
    if (!this.tempContainer) {
      throw new Error('Temporary container not initialized');
    }

    const componentRef = this.tempContainer.createComponent<T>(component);
    const instance = componentRef.instance;

    Object.assign(instance, inputs);

    if (instance.changeDetectorRef) {
      instance.changeDetectorRef.detectChanges();
    }

    const element = componentRef.location.nativeElement;
    const html = element.outerHTML;

    componentRef.destroy();
    this.tempContainer.clear();

    return html;
  }
}


================================================
File: src/styles.scss
================================================
/* You can add global styles to this file, and also import other style files */


================================================
File: tsconfig.app.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "node"
    ]
  },
  "files": [
    "src/main.ts",
    "src/main.server.ts",
    "src/server.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}


================================================
File: tsconfig.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}


================================================
File: tsconfig.spec.json
================================================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

